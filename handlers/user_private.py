import uuid
from datetime import datetime

from aiogram import Router, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
import time
import os
from urllib.parse import quote
from dateutil.relativedelta import relativedelta

import qrcode
from filters.users_filter import BlockedUsersFilter

from kbds.inline import get_callback_btns, get_inlineMix_btns, get_url_btns
from database.queries import (
    orm_change_user_status,
    orm_get_tariff,
    orm_get_tariffs,
    orm_get_faq,
    orm_get_user,
    orm_get_user_by_id,
    orm_add_user,
    orm_change_user_server,
    orm_get_servers,
    orm_get_server,
    orm_add_server,
    orm_edit_server,
    orm_end_payment,
    orm_get_payment
)
from skynetapi.skynetapi import auth, add_customer, edit_customer_date

user_private_router = Router()
user_private_router.message.filter(BlockedUsersFilter())


@user_private_router.message(Command('start'))
async def start(message, session):
    args = message.text.split()[1:]
    if args:
        await orm_add_user(session=session, user_id=message.from_user.id, name=message.from_user.full_name+str(uuid.uuid4()).split('-')[0], invited_by=args)
    else:
        await orm_add_user(session=session, user_id=message.from_user.id, name=message.from_user.full_name+str(uuid.uuid4()).split('-')[0], invited_by=None)

    await message.answer_photo(
        photo=types.FSInputFile("img/banner.png"),
        caption='<b>SkynetVPN ‚Äî —Å–µ—Ä–≤–∏—Å –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.</b>\n\n<b>–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è <a href="https://skynetvpn.ru/terms-of-service.html">–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã</a> –∏ <a href="https://skynetvpn.ru/terms-of-service.html">–ü–æ–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>.</b>\n\n–°–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ª—É—á–µ–Ω–∏–µ/—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –†–§ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n\n–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —É—Å–ª—É–≥—É –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º/–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è —Å–æ–±–ª—é–¥–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§ (–≤ —Ç.—á. 149-–§–ó, 114-–§–ó, 436-–§–ó, 187-–§–ó).',
        reply_markup=get_inlineMix_btns(
            btns={
                "–û—Ñ–µ—Ä—Ç–∞": "https://skynetvpn.ru/terms-of-service.html",
                "–ü–æ–ª–∏—Ç–∏–∫–∞ –ü–î–ù": "https://skynetvpn.ru/privacy-policy.html",
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å": "back_menu"
            }
        )
    )


@user_private_router.message(Command("main_menu"))
async def start(message: types.Message, session):
    btns = {
                "üì° –ü–æ–¥–∫–ª—é—á–∏—Ç—å": "choosesubscribe",
                "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "check_subscription",
                "üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN": "install",
                "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å": "referral_program",
                "‚ùì FAQ": "faq", "‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/skynetaivpn_support",
                "üõí –î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "other_products",
                "üìÑ –û –Ω–∞—Å": "about"
    }
    if message.from_user.id == int(os.getenv("OWNER")):
        btns["–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"] = "admin"


    await message.answer_photo(
        photo=types.FSInputFile("img/banner.png"),
        caption="<b>SkyNetVPN ‚Äî —Å–µ—Ä–≤–∏—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.</b>\n\n–ú—ã –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –Ω–µ –≤–µ–¥—ë–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏. \n\n–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞:  <b>Windows / macOS / iOS / Android / Linux / Android TV. </b>\n\n–¢—Ä–∞—Ñ–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –ª–∏–º–∏—Ç–∏—Ä—É–µ—Ç—Å—è. \n–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Å–µ—Ç–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n<b>–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.</b>", 
        reply_markup=get_inlineMix_btns(
            btns=btns,
            sizes=(1,1,1,1,2,2)
        )
    )


@user_private_router.callback_query(F.data=='about')
async def about(callback: types.CallbackQuery):
    await callback.message.edit_caption(
        caption='<b>–û –Ω–∞—Å:</b>\n\n–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —É—Å–ª—É–≥—É –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (VPN). –ù–µ —è–≤–ª—è–µ–º—Å—è –°–ú–ò, –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º –∏ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç. –°–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–æ—Ç–∞ –∏ –≤ <a href="https://skynetvpn.ru/terms-of-service.html">–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–µ</a>.\n\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b>: \n–ò–ü –ú–µ–ª–∫–æ–Ω—å—è–Ω –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞, –ò–ù–ù 232017219889, –û–ì–†–ù–ò–ü 324237500172507.\n\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ü–î–Ω</b>: \ne-mail: 555cent@mail.ru.',
        reply_markup=get_inlineMix_btns(
                    btns={"‚¨Ö –ù–∞–∑–∞–¥": "back_menu"},
                    sizes=(1,)
                 )
    )



@user_private_router.callback_query(F.data=='back_menu')
async def back_menu(callback: types.CallbackQuery):
    btns = {
                "üì° –ü–æ–¥–∫–ª—é—á–∏—Ç—å": "choosesubscribe",
                "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "check_subscription",
                "üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN": "install",
                "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å": "referral_program",
                "‚ùì FAQ": "faq", "‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/skynetaivpn_support",
                "üõí –î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "other_products",
                "üìÑ –û—Ñ–µ—Ä—Ç–∞ | –ü–æ–ª–∏—Ç–∏–∫–∞ –ü–î–Ω": "about"
    }
    photo = types.InputMediaPhoto(
			media=types.FSInputFile("img/banner.png"),  # –∏–ª–∏ BufferedInputFile –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
			caption=f"<b>SkynetVPN ‚Äî —Å–µ—Ä–≤–∏—Å –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.</b>\n\n–ú—ã –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –Ω–µ –≤–µ–¥—ë–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏.\n\n–¢—Ä–∞—Ñ–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –ª–∏–º–∏—Ç–∏—Ä—É–µ—Ç—Å—è; —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ç–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n<b>–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.</b>"
		)
	
    try:
        await callback.message.edit_media(
            media=photo,
            reply_markup=get_inlineMix_btns(
                btns=btns, 
                sizes=(1,1,1,1,2)
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


@user_private_router.callback_query(F.data.startswith('choosesubscribe'))
async def choose_subscribe(callback: types.CallbackQuery, session):
    user = await orm_get_user(session, callback.from_user.id)
    tariffs = await orm_get_tariffs(session)
    btns = {}

    servers = await orm_get_servers(session)
    countries = ''

    for i in range(0, len(servers)):
        if i == len(servers)-1:
            countries += f'‚îî {servers[i].name}'
        else:
            countries += f'‚îú {servers[i].name}\n'

        
    for i in tariffs:
        if i.recuring:
            btns[f"{i.sub_time} –º–µ—Å., {i.price} ‚ÇΩ, –∫–æ–ª. —É—Å—Ç—Ä–æ–π—Å—Ç–≤ {i.devices}"] = f"chousen_{i.id}|{user.id}"
        else:
            pass

    btns["‚¨Ö –ù–∞–∑–∞–¥"] = "back_menu"
    
    try:
        await callback.message.edit_caption(caption=f"<b>‚ö°Ô∏è –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Skynet VPN</b>\n\n‚óè –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª—é–±—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n‚óè –î–æ 4 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ \n‚óè –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b>\n\n<b>Android</b> (Android 7.0 –∏–ª–∏ –Ω–æ–≤–µ–µ.) | <b>Windows</b> (Windows 8.1 –∏–ª–∏ –Ω–æ–≤–µ–µ.) | <b>iOS, iPadOS</b> (iOS 16.0 –∏–ª–∏ –Ω–æ–≤–µ–µ.) | <b>macOS</b> –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã M  (macOS 13.0 –∏–ª–∏ –Ω–æ–≤–µ–µ) | <b>macOS</b>  c –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º Intel (macOS 11.0 –∏–ª–∏ –Ω–æ–≤–µ–µ.) | <b>Android TV</b> ( Android 7.0 –∏–ª–∏ –Ω–æ–≤–µ–µ.) | <b>Linux</b>\n\nüåç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:</b>\n{countries}", reply_markup=get_inlineMix_btns(btns=btns, sizes=(1,)))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


@user_private_router.callback_query(F.data.startswith('chousen_'))
async def show_chousen(callback, session):
    try:
        tariff = await orm_get_tariff(session, callback.data.split('_')[-1].split('|')[0])
        
        await callback.message.edit_caption(
            caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: <b>{tariff.sub_time} –º–µ—Å.</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{tariff.price} —Ä—É–±.</b>\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</b>\n–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>10 –º–∏–Ω—É—Ç</b>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã <b>–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.</b>",
            reply_markup=get_inlineMix_btns(
                btns={
                    '–û–ø–ª–∞—Ç–∏—Ç—å': f"{os.getenv('PAY_PAGE_URL')}/new_subscribe?user_id={callback.data.split('_')[-1].split('|')[1]}&sub_id={tariff.id}", 
                    '–ù–∞–∑–∞–¥': 'choosesubscribe'
                }
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


@user_private_router.callback_query(F.data == 'referral_program')
async def referral_program_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bot_username = (await callback.bot.me()).username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = int(time.time())
    qr_filename = f"qr_{user_id}_{timestamp}.png"
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(referral_link)
    qr.make(fit=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ —Ñ–∞–π–ª
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(qr_filename)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        photo = types.InputMediaPhoto(
			media=types.FSInputFile(qr_filename),  # –∏–ª–∏ BufferedInputFile –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
			caption=f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:\n\n<b>–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:</b>\n\n–ó–∞ 1 –º–µ—Å. ‚Äì 15 –¥–Ω–µ–π\n–ó–∞ 6 –º–µ—Å. ‚Äì 30 –¥–Ω–µ–π\n–ó–∞ 12 –º–µ—Å. ‚Äì 45 –¥–Ω–µ–π\n\n<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>"
		)
        try:
            await callback.message.edit_media(media=photo, reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer()
                return
            raise
        await callback.answer()
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if os.path.exists(qr_filename):
            os.remove(qr_filename)

    
# FAQ
@user_private_router.callback_query(F.data == "faq")
async def orders_list(callback: types.CallbackQuery, session):
    await callback.answer()
    message_text = "<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
    orders = await orm_get_faq(session)
    number = 1
    for order in orders:
        message_text += f"{number}. {order.ask} \n{order.answer}\n\n"
        number += 1
    try:
        await callback.message.edit_caption(
            caption=message_text,
            reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"})
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise


@user_private_router.callback_query(F.data.startswith('other_products'))
async def other_products(callback: types.CallbackQuery, session):
        try:
            await callback.message.edit_caption(
                caption="–î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:",
                reply_markup=get_inlineMix_btns(btns={
                    "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π": "https://t.me/Skynet_download_bot",
                    "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª": "https://t.me/Sky_Net_AI",
                    "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"
                    }, sizes=(1,))
                 )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                return

# Check subscription
@user_private_router.callback_query(F.data.startswith('check_subscription'))
async def check_subscription(callback: types.CallbackQuery, session):
    user_id = callback.from_user.id
    
    if callback.data.split('_')[-1]:
        user = await orm_get_user(session, user_id)

        await orm_change_user_server(session, user.id, callback.data.split('_')[-1])
    
    user = await orm_get_user(session, user_id)
    tariff = await orm_get_tariff(session, user.status)
    server = await orm_get_server(session, user.server)

    url = f'vless://{user.tun_id}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(user.name)}'
    
    if user.status > 0:
        try:
            await callback.message.edit_caption(
                caption=f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff.sub_time} –º–µ—Å—è—Ü–µ–≤, {tariff.price} ‚ÇΩ {'(–ü–æ–¥–ø–∏—Å–∫–∞)' if tariff.recuring == True else '(–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)'}\–°–µ—Ä–≤–µ—Ä: {server.name}\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user.sub_end.date()}. \n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>{url}</code>",
                reply_markup=get_inlineMix_btns(btns={"–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è v2rayRun": f'{os.getenv("PAY_PAGE_URL")}/config?user_id={user.id}', '–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä': 'changeserver','–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É': 'cancelsub_{user_id}', "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}, sizes=(1,))
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                return
            raise
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)



@user_private_router.callback_query(F.data == 'changeserver')
async def change_server(callback: types.CallbackQuery, session):
    btns = {}
    servers = await orm_get_servers(session)

    for i in servers:
        btns[i.name] = f'changesubscribe_{i.id}'
    
    btns['‚¨Ö –ù–∞–∑–∞–¥'] = 'check_subscription'

    try:
        await callback.message.edit_caption(
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=get_inlineMix_btns(
                btns=btns,
                sizes=(1,)
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise



@user_private_router.callback_query(F.data.startswith('cancelsub_'))
async def cancel_subscription(callback, session):
    try:
        user = await orm_get_user_by_id(session, callback.data.split('_')[-1])
        await orm_change_user_status(session, user.id, 0, sub_end, user.tun_id)
        await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise


@user_private_router.callback_query(F.data == 'install')
async def install_helper(callback: types.CallbackQuery, session):
    try:
        await callback.message.edit_caption(
            caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b>: \n\n–°–¥–µ–ª–∞–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=get_callback_btns(btns={'üì± Android': 'help_android', 'üçè Iphone': 'help_iphone', 'üñ• Windows': 'help_windows', 'üíª MacOS': 'help_macos', 'üêß Linux': 'help_linux', 'üì∫ AndroidTV': 'help_androidtv', "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}, sizes=(2,2,2,1))
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            return
        raise


@user_private_router.callback_query(F.data.startswith('help_'))
async def install(callback):
    text = {
            'android': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Android:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ Google Play –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://play.google.com/store/apps/details?id=com.v2raytun.android&pcampaignid=web_share',
            'iphone': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Iphone:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ App Store –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://apps.apple.com/ru/app/v2raytun/id6476628951',
            'windows': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Windows:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://storage.v2raytun.com/v2RayTun_Setup.exe',
            'macos': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ MacOS:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ App Store –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://apps.apple.com/ru/app/v2raytun/id6476628951',
            'linux': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Linux:</b>\n\n1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://github.com/hiddify/hiddify-app/releases/latest/download/Hiddify-Linux-x64.AppImage',
            'androidtv': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Android:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ Google Play –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://play.google.com/store/apps/details?id=com.v2raytun.android&pcampaignid=web_share',
            }
    
    try:
        await callback.message.edit_caption(
            caption=text[callback.data.split('_')[-1]].split('|||')[0],
            reply_markup=get_inlineMix_btns(
                btns={"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": text[callback.data.split('_')[-1]].split('|||')[1], "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è": 'check_subscription', "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"},
                sizes=(1,)
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@user_private_router.callback_query(F.data.startswith('chooseserver_'))
async def create_subscription(callback: types.CallbackQuery, session, bot):
    payment = await orm_get_payment(session, callback.data.split('_')[-1])
    await orm_change_user_server(session, payment.user_id, callback.data.split('_')[1])
    if payment.paid:
        print('–û—à–∏–±–∫–∞: –æ–ø–ª–∞—Ç–∞ —É–∂–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∞')
        return
    user = await orm_get_user_by_id(session, payment.user_id)
    tariff = await orm_get_tariff(session, payment.tariff_id)
    server = await orm_get_server(session, user.server)
    print(user.status) 
    if 1:
        current_date = datetime.now()
        new_date = current_date + relativedelta(months=tariff.sub_time)

        cookies = await auth(server.server_url, server.login, server.password)
        
        new_vpn_user = await add_customer(
            server.server_url,
            server.indoub_id,
            cookies, 
            server.name + '_' + str(user.id),
            (new_date.timestamp() * 1000),
            tariff.devices,
            user.user_id,
            callback.from_user.id or user.name
        )

        date = new_vpn_user['expire_time'] / 1000 
        date = datetime.fromtimestamp(date)

        # await orm_end_payment(session, payment.id)
        await orm_change_user_status(session, user_id=user.id, new_status=tariff.id, tun_id=str(new_vpn_user['id']), sub_end=date)
        url = f'vless://{new_vpn_user["id"]}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(new_vpn_user["email"])}'
        await bot.send_message(
            user.user_id, 
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <code>{url}</code>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Windows —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href='https://saturn-online.su/setup-guide/windows/v2raytun'>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π</a>", 
            reply_markup=get_callback_btns(
                btns={ 
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞": "https://saturn-online.su/setup-guide/"
                }
            )
        )
        callback.message.delete()

async def release():
    async_session = await get_session(session_pool=session)

    payment = await orm_get_payment(async_session, body.InvId)
    user = await orm_get_user_by_id(async_session, payment.user_id)
    tariff = await orm_get_tariff(async_session, payment.tariff_id)
    server = await orm_get_server(async_session, user.server)

    if not user.tun_id:
        if tariff.recuring:
            current_date = datetime.now()
            new_date = current_date + relativedelta(months=tariff.sub_time)

            new_vpn_user = await add_customer(cookies=await auth(server.server_url, server.login, server.password), email=user.name, expire_time=(new_date.timestamp() * 1000), limit_ip=tariff.devices)
            await create_subscription(new_vpn_user, async_session, user.id, tariff, bot)
            print(new_vpn_user, async_session, user.id, tariff, bot)
    if user.invited_by:
            pass


    

async def continue_subscription(sub_data: dict, session, user_id, tariff, bot):
    date = sub_data['expire_time'] / 1000 
    date = datetime.fromtimestamp(date)

    await orm_change_user_status(session, user_id=user_id, new_status=tariff.id, tun_id=str(sub_data['id']), sub_end=date)
    url = f"v2raytun://{sub_data['id']}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(sub_data['email'])}"
    await bot.send_message(user_id, f"<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <code>{url}</code>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å.", reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))


async def continue_subscription_by_ref(sub_data: dict, session, user_id, tariff, bot):
    date = sub_data['expire_time'] / 1000 
    date = datetime.fromtimestamp(date)

    await orm_change_user_status(session, user_id=user_id, new_status=tariff.id, tun_id=str(sub_data['id']), sub_end=date)
    url = f'v2raytun://{sub_data["id"]}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(sub_data["email"])}'
    await bot.send_message(user_id, f"<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <code>{url}</code>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å.", reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))



