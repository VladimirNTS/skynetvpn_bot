import uuid
from datetime import datetime

from aiogram import Router, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
import time
import os
from urllib.parse import quote

import qrcode
from filters.users_filter import BlockedUsersFilter

from kbds.inline import get_callback_btns, get_inlineMix_btns, get_url_btns
from database.queries import (
    orm_change_user_status,
    orm_get_tariff,
    orm_get_tariffs,
    orm_get_faq,
    orm_get_user,
    orm_get_user_by_id,
    orm_add_user,
)

user_private_router = Router()
user_private_router.message.filter(BlockedUsersFilter())

@user_private_router.message(Command("start"))
async def start(message: types.Message, session):
    args = message.text.split()[1:]
    if args:
        await orm_add_user(session=session, user_id=message.from_user.id, name=message.from_user.full_name+str(uuid.uuid4()).split('-')[0], invited_by=args)
    else:
        await orm_add_user(session=session, user_id=message.from_user.id, name=message.from_user.full_name+str(uuid.uuid4()).split('-')[0], invited_by=None)

    btns = {
                "üì° –ü–æ–¥–∫–ª—é—á–∏—Ç—å": "choosesubscribe",
                "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "check_subscription",
                "üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN": "install",
                "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å": "referral_program",
                "‚ùì FAQ": "faq", "‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/skynetaivpn_support",
                "üõí –î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "other_products",
                "üìÑ –û –Ω–∞—Å": "about"
    }
    if message.from_user.id == int(os.getenv("OWNER")):
        btns["–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"] = "admin"


    await message.answer_photo(
        photo=types.FSInputFile("img/banner.png"),
        caption="<b>SkynetVPN —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</b>\n–° –Ω–∞–º–∏ –í—ã –ø–æ–¥ –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π\n–ù–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ\n\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –æ–∑–Ω–∞–∫–æ–º—Ç–∏—Å—å —Å <a href='https://skynetvpn.ru/terms-of-service.html'>–ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π</a>", 
        reply_markup=get_inlineMix_btns(
            btns=btns,
            sizes=(1,1,1,1,2,2)
        )
    )


@user_private_router.callback_query(F.data=='about')
async def start(callback: types.CallbackQuery):
    await callback.message.edit_caption(
        caption='<b>–û –Ω–∞—Å</b>\n–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø VPN-—Å–µ—Ä–≤–∏—Å—É. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ —É–∫–∞–∑–∞–Ω–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram-–±–æ—Ç–∞ –∏–ª–∏ –≤ <a href="https://skynetvpn.ru/terms-of-service.html">–æ—Ñ–µ—Ä—Ç–µ</a>\n\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –ú–µ–ª–∫–æ–Ω—å—è–Ω –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞\n–ò–ù–ù: 232017219889, –û–ì–†–ù–ò–ü: 324237500172507',
        reply_markup=get_inlineMix_btns(
                    btns={"‚¨Ö –ù–∞–∑–∞–¥": "back_menu"},
                    sizes=(1,)
                 )
    )



@user_private_router.callback_query(F.data=='back_menu')
async def start(callback: types.CallbackQuery):
    btns = {
                "üì° –ü–æ–¥–∫–ª—é—á–∏—Ç—å": "choosesubscribe",
                "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "check_subscription",
                "üì≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN": "install",
                "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å": "referral_program",
                "‚ùì FAQ": "faq", "‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/skynetaivpn_support",
                "üõí –î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "other_products",
                "üìÑ –û –Ω–∞—Å": "about"
    }
    photo = types.InputMediaPhoto(
			media=types.FSInputFile("img/banner.png"),  # –∏–ª–∏ BufferedInputFile –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
			caption=f"<b>SkynetVPN —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.</b>\n–° –Ω–∞–º–∏ –í—ã –ø–æ–¥ –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π.\n–ù–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ."
		)
	
    try:
        await callback.message.edit_media(
            media=photo,
            reply_markup=get_inlineMix_btns(
                btns=btns, 
                sizes=(1,1,1,1,2)
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


@user_private_router.callback_query(F.data == 'choosesubscribe')
async def choose_subscribe(callback: types.CallbackQuery, session):
    user = await orm_get_user(session, callback.from_user.id)
    tariffs = await orm_get_tariffs(session)
    btns = {"‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}

    for i in tariffs:
        if i.recuring:
            btns[f"{i.sub_time} –º–µ—Å., {i.price} ‚ÇΩ, –∫–æ–ª. —É—Å—Ç—Ä–æ–π—Å—Ç–≤ {i.devices}"] = f"chousen_{i.id}|{user.id}"
        else:
            pass
    
    try:
        await callback.message.edit_caption(caption="–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ SkyNetVPN. –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–º –≤—Ä–µ–º—è", reply_markup=get_inlineMix_btns(btns=btns, sizes=(1,)))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise



@user_private_router.callback_query(F.data.startswith('chousen_'))
async def show_chousen(callback, session):
    try:
        tariff = await orm_get_tariff(session, callback.data.split('_')[-1].split('|')[0])
        
        await callback.message.edit_caption(
            caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {tariff.sub_time} –º–µ—Å.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff.price} —Ä—É–±.\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 10 –º–∏–Ω—É—Ç\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã.",
            reply_markup=get_inlineMix_btns(
                btns={
                    '–û–ø–ª–∞—Ç–∏—Ç—å': f"{os.getenv('PAY_PAGE_URL')}/new_subscribe?user_id={callback.data.split('_')[-1].split('|')[1]}&sub_id={tariff.id}", 
                    '–ù–∞–∑–∞–¥': 'choosesubscribe'
                }
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


@user_private_router.callback_query(F.data == 'referral_program')
async def referral_program_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bot_username = (await callback.bot.me()).username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = int(time.time())
    qr_filename = f"qr_{user_id}_{timestamp}.png"
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(referral_link)
    qr.make(fit=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ —Ñ–∞–π–ª
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(qr_filename)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        photo = types.InputMediaPhoto(
			media=types.FSInputFile(qr_filename),  # –∏–ª–∏ BufferedInputFile –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
			caption=f"–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞–π —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –∏—Ö –ø–æ–∫—É–ø–∫–∏:\n–ó–∞ 1 –º–µ—Å - 15 –¥–Ω–µ–π \n–ó–∞ 6 –º–µ—Å - 30 –¥–Ω–µ–π \n–ó–∞ 12 –º–µ—Å - 45 –¥–Ω–µ–π\n\n–í–∞—à–∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a src='{referral_link}'>{referral_link}</a>"
		)
        try:
            await callback.message.edit_media(media=photo, reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer()
                return
            raise
        await callback.answer()
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if os.path.exists(qr_filename):
            os.remove(qr_filename)

    
# FAQ
@user_private_router.callback_query(F.data == "faq")
async def orders_list(callback: types.CallbackQuery, session):
    await callback.answer()
    message_text = "<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
    orders = await orm_get_faq(session)
    number = 1
    for order in orders:
        message_text += f"{number}. {order.ask} \n{order.answer}\n\n"
        number += 1
    try:
        await callback.message.edit_caption(
            caption=message_text,
            reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"})
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise


@user_private_router.callback_query(F.data.startswith('other_products'))
async def check_subscription(callback: types.CallbackQuery, session):
        try:
            await callback.message.edit_caption(
                caption="–î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:",
                reply_markup=get_inlineMix_btns(btns={
                    "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π": "https://t.me/Skynet_download_bot",
                    "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª": "https://t.me/Sky_Net_AI",
                    "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"
                    }, sizes=(1,))
                 )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                return

# Check subscription
@user_private_router.callback_query(F.data.startswith('check_subscription'))
async def check_subscription(callback: types.CallbackQuery, session):
    user_id = callback.from_user.id
    user = await orm_get_user(session, user_id)
    tariff = await orm_get_tariff(session, user.status)

    url = f'v2raytun://import/{user.tun_id}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(user.name)}'
    
    if user.status > 0:
        try:
            await callback.message.edit_caption(
                caption=f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff.sub_time} –º–µ—Å—è—Ü–µ–≤, {tariff.price} ‚ÇΩ {'(–ü–æ–¥–ø–∏—Å–∫–∞)' if tariff.recuring == True else '(–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)'}\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user.sub_end.date()}. \n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>{url}</code>",
                reply_markup=get_inlineMix_btns(btns={"–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è v2rayRun": f'{os.getenv("PAY_PAGE_URL")}/config?user_id={user.id}', '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É': 'cancelsub_{user_id}', "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}, sizes=(1,))
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                return
            raise
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")


@user_private_router.callback_query(F.data.startswith('cancelsub_'))
async def cancel_subscription(callback, session):
    try:
        user = await orm_get_user_by_id(session, callback.data.split('_')[-1])
        await orm_change_user_status(session, user.id, 0, sub_end, user.tun_id)
        await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            return
        raise


@user_private_router.callback_query(F.data == 'install')
async def install_helper(callback: types.CallbackQuery, session):
    try:
        await callback.message.edit_caption(
            caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</b>: \n\n–°–¥–µ–ª–∞–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=get_callback_btns(btns={'üì± Android': 'help_android', 'üçè Iphone': 'help_iphone', 'üñ• Windows': 'help_windows', 'üíª MacOS': 'help_macos', 'üêß Linux': 'help_linux', 'üì∫ AndroidTV': 'help_androidtv', "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}, sizes=(2,2,2,1))
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            return
        raise


@user_private_router.callback_query(F.data.startswith('help_'))
async def install(callback):
    text = {
            'android': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Android:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ Google Play –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://play.google.com/store/apps/details?id=com.v2raytun.android&pcampaignid=web_share',
            'iphone': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Iphone:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ App Store –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://apps.apple.com/ru/app/v2raytun/id6476628951',
            'windows': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Windows:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://storage.v2raytun.com/v2RayTun_Setup.exe',
            'macos': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ MacOS:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ App Store –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://apps.apple.com/ru/app/v2raytun/id6476628951',
            'linux': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Linux:</b>\n\n1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://github.com/hiddify/hiddify-app/releases/latest/download/Hiddify-Linux-x64.AppImage',
            'androidtv': '<b>üìñ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ Android:</b>\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´v2RayTun¬ª –∏–∑ Google Play –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n3. –í—Å—ë –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∏ –º–æ–∂–µ—Ç–µ –±–µ–∑ –ø—Ä–µ–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!|||https://play.google.com/store/apps/details?id=com.v2raytun.android&pcampaignid=web_share',
            }
    
    try:
        await callback.message.edit_caption(
            caption=text[callback.data.split('_')[-1]].split('|||')[0],
            reply_markup=get_inlineMix_btns(
                btns={"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": text[callback.data.split('_')[-1]].split('|||')[1], "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è": 'check_subscription', "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"},
                sizes=(1,)
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
            return
        raise


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
async def create_subscription(sub_data: dict, session, user_id, tariff, bot):
    date = sub_data['expire_time'] / 1000 
    date = datetime.fromtimestamp(date)

    await orm_change_user_status(session, user_id=user_id, new_status=tariff.id, tun_id=str(sub_data['id']), sub_end=date)
    url = f'vless://{sub_data["id"]}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(sub_data["email"])}'
    await bot.send_message(user_id, f"<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <code>{url}</code>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å.", reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))


async def continue_subscription(sub_data: dict, session, user_id, tariff, bot):
    date = sub_data['expire_time'] / 1000 
    date = datetime.fromtimestamp(date)

    await orm_change_user_status(session, user_id=user_id, new_status=tariff.id, tun_id=str(sub_data['id']), sub_end=date)
    url = f"v2raytun://{sub_data['id']}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(sub_data['email'])}"
    await bot.send_message(user_id, f"<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <code>{url}</code>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å.", reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))


async def continue_subscription_by_ref(sub_data: dict, session, user_id, tariff, bot):
    date = sub_data['expire_time'] / 1000 
    date = datetime.fromtimestamp(date)

    await orm_change_user_status(session, user_id=user_id, new_status=tariff.id, tun_id=str(sub_data['id']), sub_end=date)
    url = f'v2raytun://{sub_data["id"]}@super.skynetvpn.ru:443?type=tcp&security=tls&fp=chrome&alpn=h3%2Ch2%2Chttp%2F1.1&flow=xtls-rprx-vision#SkynetVPN-{quote(sub_data["email"])}'
    await bot.send_message(user_id, f"<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {date}\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <code>{url}</code>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å.", reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))



